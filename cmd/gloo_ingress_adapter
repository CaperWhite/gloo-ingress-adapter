#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler"
Dir.chdir(__dir__) { Bundler.require }

require "logger"
require "optparse"
require "pathname"

$stdout.sync = true

Signal.trap("QUIT") do
  Thread.list.each do |thread|
    $stdout.puts "--- #{["Thread", thread.name].compact.join(" ")} (#{thread.native_thread_id}) ---"
    $stdout.puts thread.backtrace&.join("\n")
  end
end

Thread.current.name = "main"

ControllerOptions = Struct.new(:watch, :kubeconfig, :once, :log_level, :debug, keyword_init: true)
options = ControllerOptions.new

OptionParser.new do |parser|
  parser.banner = "Usage: controller [arguments]"

  parser.on("-w", "--[no-]watch", "Continuously watch ingresses and update route tables instead of running once") do |v|
    options.watch = v ? true : false
  end

  parser.on("-c", "--kubeconfig=CONFIG", "Kubeconfig file to use") do |v|
    options.kubeconfig = Pathname(v).expand_path
  end

  parser.on("-l", "--log-level=LEVEL", "Log level") do |v|
    options.log_level = Logger::Severity.const_get(v.upcase)
  end

  parser.on("-d", "--debug", "Debug mode") do |v|
    options.debug = v ? true : false
  end
end.parse!

options.debug ||= false
options.watch ||= false
options.log_level ||= (options.debug ? Logger::DEBUG : Logger::INFO)

logger = Logger.new($stdout, level: options.log_level)

controller = GlooIngressAdapter::Controller.new(
  kubeconfig: options.kubeconfig,
  logger:,
  route_table_builder: GlooIngressAdapter::RouteTableBuilder.new
)

Signal.trap("TERM") do
  Thread.new do
    logger.info("Terminating")
    controller.stop
  end
end

begin
  controller.run(watch: options.watch)
rescue StandardError => e
  logger.error(e.full_message)
  exit 1
end
